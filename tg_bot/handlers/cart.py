from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from decimal import Decimal

from bot.models import CartItem, TelegramUser, Product

router = Router()

# –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "view_cart")
async def show_cart(query: CallbackQuery):
    user_obj, _ = await TelegramUser.objects.aget_or_create(telegram_id=query.from_user.id)
    cart_items = [
        item async for item in CartItem.objects.filter(user=user_obj).select_related('product')
    ]
    
    if not cart_items:
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog")
        await query.message.edit_text(
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
            reply_markup=builder.as_markup()
        )
        await query.answer()
        return

    message_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    builder = InlineKeyboardBuilder()
    
    for idx, item in enumerate(cart_items, 1):
        product = item.product
        message_text += f"{idx}. {product.description}\n"
        message_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} —à—Ç.\n\n"
        builder.button(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {idx}",
            callback_data=f"remove_from_cart:{product.id}"
        )
    
    builder.adjust(2)
    builder.row()
    
    builder.button(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
    builder.button(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
    builder.adjust(1)
    builder.row()
    builder.button(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog")
    
    await query.message.edit_text(message_text, reply_markup=builder.as_markup())
    await query.answer()


# –æ—á–∏—â–∞–µ–º –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "clear_cart")
async def clear_cart(query: CallbackQuery):
    user_obj, _ = await TelegramUser.objects.aget_or_create(telegram_id=query.from_user.id)
    await CartItem.objects.filter(user=user_obj).adelete()
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog")
    
    await query.message.edit_text(
        "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
        reply_markup=builder.as_markup()
    )
    await query.answer()


# —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@router.callback_query(F.data.startswith("remove_from_cart:"))
async def remove_from_cart(query: CallbackQuery):
    product_id = int(query.data.split(":")[1])
    user_obj, _ = await TelegramUser.objects.aget_or_create(telegram_id=query.from_user.id)
    await CartItem.objects.filter(user=user_obj, product_id=product_id).adelete()
    await show_cart(query)


# –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "checkout")
async def start_checkout(query: CallbackQuery, state: FSMContext):
    user_obj, _ = await TelegramUser.objects.aget_or_create(telegram_id=query.from_user.id)
    cart_items = [
        item async for item in CartItem.objects.filter(user=user_obj).select_related('product')
    ]
    
    if not cart_items:
        await query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    message_text = "üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
    message_text += "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
    
    for item in cart_items:
        message_text += f"‚Ä¢ {item.product.description} - {item.quantity} —à—Ç.\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="view_cart")
    
    await query.message.edit_text(
        message_text,
        reply_markup=builder.as_markup()
    )
    await query.answer()