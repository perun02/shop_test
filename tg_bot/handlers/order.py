from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
import uuid
from yookassa import Configuration, Payment

from bot.models import CartItem, Order, OrderItem, TelegramUser

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa
Configuration.account_id = os.getenv('YOOKASSA_SHOP_ID')
Configuration.secret_key = os.getenv('YOOKASSA_SECRET_KEY')

router = Router()


class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_confirmation = State()

# –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "confirm_order")
async def start_order(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(OrderStates.waiting_for_name)
    await query.answer()


@router.message(OrderStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if len(message.text) < 3:
        await message.answer("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(full_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderStates.waiting_for_phone)


@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.replace('+', '').isdigit() or len(phone) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    await state.update_data(phone_number=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ç–¥ 
@router.message(OrderStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    if len(message.text) < 10:
        await message.answer("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return

    await state.update_data(address=message.text)
    data = await state.get_data()

    user_obj, _ = await TelegramUser.objects.aget_or_create(telegram_id=message.from_user.id)
    cart_items = [
        item async for item in CartItem.objects.filter(user=user_obj).select_related('product')
    ]

    message_text = "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
    message_text += f"üë§ –§–ò–û: {data['full_name']}\n"
    message_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
    message_text += f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n\n"
    message_text += "–¢–æ–≤–∞—Ä—ã:\n"

    for item in cart_items:
        message_text += f"‚Ä¢ {item.product.description} - {item.quantity} —à—Ç.\n"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="complete_order")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
    builder.adjust(1)

    await message.answer(message_text, reply_markup=builder.as_markup())
    await state.set_state(OrderStates.waiting_for_confirmation)


@router.callback_query(F.data == "complete_order")
async def complete_order(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_obj, _ = await TelegramUser.objects.aget_or_create(telegram_id=query.from_user.id)
    cart_items = [item async for item in CartItem.objects.filter(user=user_obj).select_related('product')]

    order = await Order.objects.acreate(
        user=user_obj,
        full_name=data['full_name'],
        phone_number=data['phone_number'],
        address=data['address']
    )

    for cart_item in cart_items:
        await OrderItem.objects.acreate(
            order=order,
            product=cart_item.product,
            quantity=cart_item.quantity
        )

    payment = Payment.create({
        "amount": {
            "value": "199.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/shoooptest_bot"
        },
        "capture": True,
        "description": f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}"
    })

    await Order.objects.filter(id=order.id).aupdate(is_paid=True)

    await CartItem.objects.filter(user=user_obj).adelete()
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
        url=payment.confirmation.confirmation_url
    )

    await query.message.edit_text(
        f"üõç –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞.",
        reply_markup=builder.as_markup()
    )
    await query.answer()

    builder = InlineKeyboardBuilder()
    builder.button(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog")

    await query.message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n"
        f"üì¶ –°—Ç–∞—Ç—É—Å: –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data['full_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['address']}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "cancel_order")
async def cancel_order(query: CallbackQuery, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")

    await query.message.edit_text(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=builder.as_markup()
    )
    await query.answer()
