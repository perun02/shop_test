from aiogram import Router, F
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.markdown import hbold
from aiogram.utils.keyboard import InlineKeyboardBuilder
import hashlib

from bot.models import TelegramUser, CartItem

router = Router()


# –ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
faq_database = {
    "–¥–æ—Å—Ç–∞–≤–∫–∞": "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: 1-3 –¥–Ω—è –ø–æ –ú–æ—Å–∫–≤–µ, 3-7 –¥–Ω–µ–π –ø–æ –†–æ—Å—Å–∏–∏.",
    "–æ–ø–ª–∞—Ç–∞": "üí≥ –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–∞–º–∏ Visa, MasterCard, –ú–ò–†, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.",
    "–≤–æ–∑–≤—Ä–∞—Ç": "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –≤–∏–¥–∞.",
    "—Ä–µ–∂–∏–º": "üïí –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.",
    "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\nüìß Email: support@shop.ru",
    "—Å–∫–∏–¥–∫–∏": "üè∑Ô∏è –£ –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫: \n- –æ—Ç 5000‚ÇΩ - —Å–∫–∏–¥–∫–∞ 5%\n- –æ—Ç 10000‚ÇΩ - —Å–∫–∏–¥–∫–∞ 10%",
}

topic_emoji = {
    "–¥–æ—Å—Ç–∞–≤–∫–∞": "üöö",
    "–æ–ø–ª–∞—Ç–∞": "üí≥",
    "–≤–æ–∑–≤—Ä–∞—Ç": "‚Ü©Ô∏è",
    "—Ä–µ–∂–∏–º": "üïí",
    "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "üìû",
    "—Å–∫–∏–¥–∫–∏": "üè∑Ô∏è",
}

@router.inline_query()
async def faq_inline_handler(inline_query: InlineQuery):
    query = inline_query.query.lower()
    results = []
    
    for keyword, answer in faq_database.items():
        if query and not keyword.startswith(query):
            continue
            
        result_id = hashlib.md5(keyword.encode()).hexdigest()
        message_text = f"{hbold(keyword.capitalize())}\n\n{answer}"
        
        item = InlineQueryResultArticle(
            id=result_id,
            title=keyword.capitalize(),
            description=answer[:100] + "..." if len(answer) > 100 else answer,
            input_message_content=InputTextMessageContent(
                message_text=message_text,
                parse_mode="HTML"
            )
        )
        results.append(item)
    
    if not results:
        help_text = "‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∫–∏:\n"
        help_text += "\n".join(f"‚Ä¢ {key}" for key in faq_database.keys())
        
        results.append(
            InlineQueryResultArticle(
                id="help",
                title="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
                description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                input_message_content=InputTextMessageContent(
                    message_text=help_text,
                    parse_mode="HTML"
                )
            )
        )
    
    await inline_query.answer(results, cache_time=300)

@router.callback_query(F.data == "show_faq")
async def show_faq_menu(callback: CallbackQuery):
    text = "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    
    builder = InlineKeyboardBuilder()
    
    for topic in faq_database.keys():
        builder.button(
            text=f"{topic_emoji.get(topic, '‚ùì')} {topic.capitalize()}", 
            callback_data=f"faq:{topic}"
        )
    
    builder.row(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("faq:"))
async def show_faq_answer(callback: CallbackQuery):
    topic = callback.data.replace("faq:", "")
    
    answer_text = f"{topic_emoji.get(topic, '‚ùì')} {topic.capitalize()}\n\n"
    answer_text += faq_database[topic]
    
    builder = InlineKeyboardBuilder()
    
    for other_topic in faq_database.keys():
        if other_topic != topic:
            builder.button(
                text=f"{topic_emoji.get(other_topic, '‚ùì')} {other_topic.capitalize()}", 
                callback_data=f"faq:{other_topic}"
            )
    
    builder.row(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        answer_text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery):
    user = callback.from_user
    text = f"üîÑ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–ö–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog")
    builder.button(text="FAQ", callback_data="show_faq")
    builder.adjust(2)
    
    user_obj, _ = await TelegramUser.objects.aget_or_create(telegram_id=user.id)
    has_cart_items = await CartItem.objects.filter(user=user_obj).aexists()
    if has_cart_items:
        builder.row(InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"))
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()